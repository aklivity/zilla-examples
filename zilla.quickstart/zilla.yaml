name: quickstart
bindings:

# Gateway ingress config
  tcp_server:
    type: tcp
    kind: server
    options:
      host: 0.0.0.0
      port: 8080
    exit: http_server
  http_server:
    type: http
    kind: server
    options:
      access-control:
        policy: cross-origin
    routes:
      - when:
          - headers:
              :scheme: http
              :authority: localhost:8080
              :path: /sse/stream
        exit: sse_server
      - when:
          - headers:
              :scheme: http
              :authority: localhost:8080
              :path: /sse/*
        exit: sse_http_kafka_proxy
      - when:
          - headers:
              :scheme: http
              :authority: localhost:8080
              :path: /api/*
        exit: api_http_kafka_proxy

# Proxy REST endpoints to Kafka a topic
  api_http_kafka_proxy:
    type: http-kafka
    kind: proxy
    routes:
      - when:
          - method: POST
            path: /api/items
        exit: kafka_cache_client
        with:
          capability: produce
          topic: items-snapshots
          key: ${idempotencyKey}
      - when:
          - method: PUT
            path: /api/items/{id}
        exit: kafka_cache_client
        with:
          capability: produce
          topic: items-snapshots
          key: ${params.id}
      - when:
          - method: DELETE
            path: /api/items/{id}
        exit: kafka_cache_client
        with:
          capability: produce
          topic: items-snapshots
          key: ${params.id}
      - when:
          - method: GET
            path: /api/items
        exit: kafka_cache_client
        with:
          capability: fetch
          topic: items-snapshots
          merge:
            content-type: application/json
      - exit: kafka_cache_client
        when:
          - method: GET
            path: /api/items/{id}
        with:
          capability: fetch
          topic: items-snapshots
          filters:
            - key: ${params.id}

  sse_http_kafka_proxy:
    type: http-kafka
    kind: proxy
    routes:
      - when:
          - method: POST
            path: /sse/events
        exit: kafka_cache_client
        with:
          capability: produce
          topic: sse-events
          key: ${idempotencyKey}
      - when:
          - method: GET
            path: /sse/events
        exit: kafka_cache_client
        with:
          capability: fetch
          topic: sse-events
          merge:
            content-type: application/json

# SSE Server With an exit to Kafka
  sse_server:
    type: sse
    kind: server
    exit: sse_kafka_proxy
  sse_kafka_proxy:
    type: sse-kafka
    kind: proxy
    routes:
      - when:
          - path: /sse/stream
        exit: kafka_cache_client
        with:
          topic: sse-events

# Kafka caching layer
  kafka_cache_client:
    type: kafka
    kind: cache_client
    options:
      bootstrap:
        - items-snapshots
        - sse-events
    exit: kafka_cache_server
  kafka_cache_server:
    type: kafka
    kind: cache_server
    exit: kafka_client

# Connect to local Kafka
  kafka_client:
    type: kafka
    kind: client
    exit: kafka_tcp_client
  kafka_tcp_client:
    type: tcp
    kind: client
    options:
      host: kafka
      port: 29092
    routes:
      - when:
          - cidr: 0.0.0.0/0
