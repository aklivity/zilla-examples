name: grpc-quickstart
bindings:

# Proxy service entrypoint
  north_tcp_server:
    type: tcp
    kind: server
    options:
      host: 0.0.0.0
      port:
        - 7151
    routes:
        - when:
            - port: 7151
          exit: north_grpc_http_server
    telemetry:
      metrics:
        - stream.*
  north_grpc_http_server:
    type: http
    kind: server
    options:
      versions:
        - h2
      access-control:
        policy: cross-origin
    exit: north_grpc_server
    telemetry:
      metrics:
        - stream.*
        - http.*

# gRPC service definition to Kafka topics
  north_grpc_server:
    type: grpc
    kind: server
    options:
      services:
        - proto/echo.proto
        - proto/route_guide.proto
    routes:
      - when:
          - method: example.EchoService/*
        exit: north_grpc_kafka_mapping
      - when:
          - method: routeguide.RouteGuide/*
        exit: north_grpc_kafka_mapping
    telemetry:
      metrics:
        - stream.*
        - grpc.*
  north_grpc_kafka_mapping:
    type: grpc-kafka
    kind: proxy
    routes:
      - when:
          - method: example.EchoService/*
        exit: north_kafka_cache_client
        with:
          capability: produce
          topic: echo-service-messages
          acks: leader_only
          reply-to: echo-service-messages
      - when:
          - method: routeguide.RouteGuide/*
        exit: north_kafka_cache_client
        with:
          capability: produce
          topic: route-guide-requests
          acks: leader_only
          reply-to: route-guide-responses

# Kafka sync layer
  north_kafka_cache_client:
    type: kafka
    kind: cache_client
    exit: south_kafka_cache_server
  south_kafka_cache_server:
    type: kafka
    kind: cache_server
    options:
      bootstrap:
        - route-guide-requests
        - route-guide-responses
    exit: south_kafka_client

# Connect to local Kafka
  south_kafka_client:
    type: kafka
    kind: client
    options:
      servers:
        -  ${{env.KAFKA_BOOTSTRAP_SERVER}}
    exit: south_kafka_tcp_client
  south_kafka_tcp_client:
    type: tcp
    kind: client

# Kafka to external gRPC server
  west_kafka_grpc_remote_server:
    type: kafka-grpc
    kind: remote_server
    entry: north_kafka_cache_client
    options:
      acks: leader_only
    routes:
      - when:
          - topic: route-guide-requests
            reply-to: route-guide-responses
            method: routeguide.RouteGuide/*
        with:
          scheme: http
          authority: ${{env.ROUTE_GUIDE_SERVER_HOST}}:${{env.ROUTE_GUIDE_SERVER_PORT}}
        exit: west_route_guide_grpc_client

# gRPC RoutGuide server config
  west_route_guide_grpc_client:
    type: grpc
    kind: client
    exit: west_route_guide_http_client
  west_route_guide_http_client:
    type: http
    kind: client
    options:
      versions:
        - h2
    exit: west_route_guide_tcp_client
  west_route_guide_tcp_client:
    type: tcp
    kind: client
    options:
      host: ${{env.ROUTE_GUIDE_SERVER_HOST}}
      port: ${{env.ROUTE_GUIDE_SERVER_PORT}}

telemetry:
  # Desired metrics to track
  metrics:
    - http.active.requests
    - http.request.size
    - http.response.size
    - stream.opens.sent
    - stream.opens.received
    - stream.closes.sent
    - stream.closes.received
    - stream.errors.sent
    - stream.errors.received
    - stream.active.sent
    - stream.active.received
    - grpc.active.requests
    - grpc.requests.per.rpc
    - grpc.responses.per.rpc
