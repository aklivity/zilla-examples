name: http-quickstart
bindings:
  # Proxy service entrypoint
  north_tcp_server:
    type: tcp
    kind: server
    options:
      host: 0.0.0.0
      port:
        - 7114
    routes:
      - when:
          - port: 7114
        exit: north_http_server
    telemetry:
      metrics:
        - stream.*
  north_http_server:
    type: http
    kind: server
    options:
      access-control:
        policy: cross-origin
    routes:
      - when:
          - headers:
              :scheme: http
              :authority: localhost:7114
              :path: /sse/stream
        exit: north_sse_server
      - when:
          - headers:
              :scheme: http
              :authority: localhost:7114
              :path: /sse/*
        exit: north_sse_api_http_kafka_mapping
      - when:
          - headers:
              :scheme: http
              :authority: localhost:7114
              :path: /api/*
        exit: north_rest_api_http_kafka_mapping
    telemetry:
      metrics:
        - stream.*
        - http.*

  # REST proxy endpoints to Kafka a topic
  north_rest_api_http_kafka_mapping:
    type: http-kafka
    kind: proxy
    routes:
      - when:
          - method: POST
            path: /api/items
        exit: north_kafka_cache_client
        with:
          capability: produce
          topic: items-crud
          key: ${idempotencyKey}
      - when:
          - method: PUT
            path: /api/items/{id}
        exit: north_kafka_cache_client
        with:
          capability: produce
          topic: items-crud
          key: ${params.id}
      - when:
          - method: DELETE
            path: /api/items/{id}
        exit: north_kafka_cache_client
        with:
          capability: produce
          topic: items-crud
          key: ${params.id}
      - when:
          - method: GET
            path: /api/items
        exit: north_kafka_cache_client
        with:
          capability: fetch
          topic: items-crud
          merge:
            content-type: application/json
      - when:
          - method: GET
            path: /api/items/{id}
        exit: north_kafka_cache_client
        with:
          capability: fetch
          topic: items-crud
          filters:
            - key: ${params.id}

  # SSE proxy endpoints to Kafka a topic
  north_sse_api_http_kafka_mapping:
    type: http-kafka
    kind: proxy
    routes:
      - when:
          - method: POST
            path: /sse/events
        exit: north_kafka_cache_client
        with:
          capability: produce
          topic: events-sse
          key: ${idempotencyKey}
      - when:
          - method: GET
            path: /sse/events
        exit: north_kafka_cache_client
        with:
          capability: fetch
          topic: events-sse
          merge:
            content-type: application/json
      - when:
          - method: GET
            path: /sse/events/{id}
        exit: north_kafka_cache_client
        with:
          capability: fetch
          topic: events-sse
          filters:
            - key: ${params.id}

  # SSE Server to Kafka topics
  north_sse_server:
    type: sse
    kind: server
    exit: north_sse_kafka_mapping
  north_sse_kafka_mapping:
    type: sse-kafka
    kind: proxy
    routes:
      - when:
          - path: /sse/stream
        exit: north_kafka_cache_client
        with:
          topic: events-sse

  # Kafka sync layer
  north_kafka_cache_client:
    type: kafka
    kind: cache_client
    exit: south_kafka_cache_server
  south_kafka_cache_server:
    type: kafka
    kind: cache_server
    options:
      bootstrap:
        - items-crud
    exit: south_kafka_client

  # Connect to local Kafka
  south_kafka_client:
    type: kafka
    kind: client
    options:
      servers:
        - ${{env.KAFKA_BOOTSTRAP_SERVER}}
    exit: south_kafka_tcp_client
  south_kafka_tcp_client:
    type: tcp
    kind: client

telemetry:
  # Desired metrics to track
  metrics:
    - http.active.requests
    - http.request.size
    - http.response.size
    - stream.opens.sent
    - stream.opens.received
    - stream.closes.sent
    - stream.closes.received
    - stream.errors.sent
    - stream.errors.received
    - stream.active.sent
    - stream.active.received
