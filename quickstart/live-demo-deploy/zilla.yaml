---
name: grpc-quickstart
catalogs:
  host_filesystem:
    type: filesystem
    options:
      subjects:
        route_guide:
          path: /proto/route_guide.proto
bindings:
  # Proxy service entrypoint
  north_tcp_server:
    type: tcp
    kind: server
    options:
      host: 0.0.0.0
      port:
        - 7151
    routes:
      - when:
          - port: 7151
        exit: north_grpc_http_server
    telemetry:
      metrics:
        - stream.*
  north_grpc_http_server:
    type: http
    kind: server
    options:
      versions:
        - h2
      access-control:
        policy: cross-origin
    exit: north_grpc_server
    telemetry:
      metrics:
        - stream.*
        - http.*
  # gRPC service definition to Kafka topics
  north_grpc_server:
    type: grpc
    kind: server
    catalog:
      host_filesystem:
        - subject: route_guide
    exit: north_grpc_kafka_mapping
    telemetry:
      metrics:
        - stream.*
        - grpc.*
  north_grpc_kafka_mapping:
    type: grpc-kafka
    kind: proxy
    routes:
      - when:
          - method: routeguide.RouteGuide/*
        exit: north_kafka_cache_client
        with:
          capability: produce
          topic: grpc-request
          acks: leader_only
          reply-to: grpc-response

  # Kafka sync layer
  north_kafka_cache_client:
    type: kafka
    kind: cache_client
    exit: south_kafka_cache_server
  south_kafka_cache_server:
    type: kafka
    kind: cache_server
    options:
      bootstrap:
        - grpc-request
        - grpc-response
    exit: south_kafka_client
  # Connect to local Kafka
  south_kafka_client:
    type: kafka
    kind: client
    options:
      servers:
        - ${{env.KAFKA_BOOTSTRAP_SERVER}}
      sasl:
        mechanism: plain
        username: ${{env.KAFKA_USER}}
        password: ${{env.KAFKA_PASS}}
    exit: south_tls_client
  south_tls_client:
    type: tls
    kind: client
    exit: south_tcp_client
  south_tcp_client:
    type: tcp
    kind: client
  # Kafka to external gRPC server
  west_kafka_grpc_remote_server:
    type: kafka-grpc
    kind: remote_server
    entry: north_kafka_cache_client
    options:
      acks: leader_only
    routes:
      - when:
          - topic: grpc-request
            reply-to: grpc-response
            method: routeguide.RouteGuide/*
        with:
          scheme: http
          authority: ${{env.ROUTE_GUIDE_SERVER_HOST}}:${{env.ROUTE_GUIDE_SERVER_PORT}}
        exit: west_route_guide_grpc_client
  # gRPC RoutGuide server config
  west_route_guide_grpc_client:
    type: grpc
    kind: client
    exit: west_route_guide_http_client
  west_route_guide_http_client:
    type: http
    kind: client
    options:
      versions:
        - h2
    exit: west_route_guide_tcp_client
  west_route_guide_tcp_client:
    type: tcp
    kind: client
    options:
      host: ${{env.ROUTE_GUIDE_SERVER_HOST}}
      port: ${{env.ROUTE_GUIDE_SERVER_PORT}}
telemetry:
  # Desired metrics to track
  metrics:
    - http.active.requests
    - http.request.size
    - http.response.size
    - stream.opens.sent
    - stream.opens.received
    - stream.closes.sent
    - stream.closes.received
    - stream.errors.sent
    - stream.errors.received
    - stream.active.sent
    - stream.active.received
    - grpc.active.requests
    - grpc.requests.per.rpc
    - grpc.responses.per.rpc
---
name: http-quickstart
bindings:
  # Proxy service entrypoint
  north_tcp_server:
    type: tcp
    kind: server
    options:
      host: 0.0.0.0
      port:
        - 7114
    routes:
      - when:
          - port: 7114
        exit: north_http_server
    telemetry:
      metrics:
        - stream.*
  north_http_server:
    type: http
    kind: server
    options:
      access-control:
        policy: cross-origin
    routes:
      - when:
          - headers:
              :path: /api/stream
        exit: north_sse_server
      - when:
          - headers:
              :path: /api/stream/*
        exit: north_sse_server
      - when:
          - headers:
              :path: /api/*
        exit: north_rest_api_http_kafka_mapping
    telemetry:
      metrics:
        - stream.*
        - http.*
  # REST proxy endpoints to Kafka a topic
  north_rest_api_http_kafka_mapping:
    type: http-kafka
    kind: proxy
    routes:
      - when:
          - method: POST
            path: /api/items
        exit: north_kafka_cache_client
        with:
          capability: produce
          topic: http-messages
          key: ${idempotencyKey}
      - when:
          - method: PUT
            path: /api/items/{id}
        exit: north_kafka_cache_client
        with:
          capability: produce
          topic: http-messages
          key: ${params.id}
      - when:
          - method: DELETE
            path: /api/items/{id}
        exit: north_kafka_cache_client
        with:
          capability: produce
          topic: http-messages
          key: ${params.id}
      - when:
          - method: GET
            path: /api/items
        exit: north_kafka_cache_client
        with:
          capability: fetch
          topic: http-messages
          merge:
            content-type: application/json
      - when:
          - method: GET
            path: /api/items/{id}
        exit: north_kafka_cache_client
        with:
          capability: fetch
          topic: http-messages
          filters:
            - key: ${params.id}
  # SSE Server to Kafka topics
  north_sse_server:
    type: sse
    kind: server
    exit: north_sse_kafka_mapping
  north_sse_kafka_mapping:
    type: sse-kafka
    kind: proxy
    routes:
      - when:
          - path: /api/stream
        exit: north_kafka_cache_client
        with:
          topic: http-messages
      - when:
          - path: /api/stream/{id}
        exit: north_kafka_cache_client
        with:
          topic: http-messages
          filters:
            - key: ${params.id}
  # Kafka sync layer
  north_kafka_cache_client:
    type: kafka
    kind: cache_client
    exit: south_kafka_cache_server
  south_kafka_cache_server:
    type: kafka
    kind: cache_server
    options:
      bootstrap:
        - http-messages
    exit: south_kafka_client
  # Connect to local Kafka
  south_kafka_client:
    type: kafka
    kind: client
    options:
      servers:
        - ${{env.KAFKA_BOOTSTRAP_SERVER}}
      sasl:
        mechanism: plain
        username: ${{env.KAFKA_USER}}
        password: ${{env.KAFKA_PASS}}
    exit: south_tls_client
  south_tls_client:
    type: tls
    kind: client
    exit: south_tcp_client
  south_tcp_client:
    type: tcp
    kind: client
telemetry:
  # Desired metrics to track
  metrics:
    - http.active.requests
    - http.request.size
    - http.response.size
    - stream.opens.sent
    - stream.opens.received
    - stream.closes.sent
    - stream.closes.received
    - stream.errors.sent
    - stream.errors.received
    - stream.active.sent
    - stream.active.received
---
name: mqtt-quickstart
bindings:
  # Proxy service entrypoint
  north_tcp_server:
    type: tcp
    kind: server
    options:
      host: 0.0.0.0
      port:
        - 7183
    routes:
      - when:
          - port: 7183
        exit: north_mqtt_server
    telemetry:
      metrics:
        - stream.*
  # MQTT Server to Kafka topics
  north_mqtt_server:
    type: mqtt
    kind: server
    exit: north_mqtt_kafka_mapping
    telemetry:
      metrics:
        - stream.*
  north_mqtt_kafka_mapping:
    type: mqtt-kafka
    kind: proxy
    options:
      topics:
        sessions: mqtt-sessions
        messages: mqtt-messages
        retained: mqtt-retained
    exit: north_kafka_cache_client
    telemetry:
      metrics:
        - stream.*
  # Kafka sync layer
  north_kafka_cache_client:
    type: kafka
    kind: cache_client
    exit: south_kafka_cache_server
    telemetry:
      metrics:
        - stream.*
  south_kafka_cache_server:
    type: kafka
    kind: cache_server
    options:
      bootstrap:
        - mqtt-messages
        - mqtt-retained
    exit: south_kafka_client
    telemetry:
      metrics:
        - stream.*
  # Connect to local Kafka
  south_kafka_client:
    type: kafka
    kind: client
    options:
      servers:
        - ${{env.KAFKA_BOOTSTRAP_SERVER}}
      sasl:
        mechanism: plain
        username: ${{env.KAFKA_USER}}
        password: ${{env.KAFKA_PASS}}
    exit: south_tls_client
  south_tls_client:
    type: tls
    kind: client
    exit: south_tcp_client
  south_tcp_client:
    type: tcp
    kind: client
telemetry:
  # Desired metrics to track
  metrics:
    - stream.opens.sent
    - stream.opens.received
    - stream.closes.sent
    - stream.closes.received
    - stream.errors.sent
    - stream.errors.received
    - stream.active.sent
    - stream.active.received
---
name: telemetry-exporters
telemetry:
  exporters:
    # Enable Standard Out logs
    stdout_logs_exporter:
      type: stdout
    # Prometheus endpoint definition
    prometheus_metric_exporter:
      type: prometheus
      options:
        endpoints:
          - scheme: http
            path: /metrics
            port: 7190
