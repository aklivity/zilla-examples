name: REST-example
bindings:

# Gateway ingress config
  api_tcp_server:
    type: tcp
    kind: server
    options:
      host: 0.0.0.0
      port: 8080
    exit: http_server
  http_server:
    type: http
    kind: server
    options:
      access-control:
        policy: cross-origin
    routes:
      # - when:
      #     - headers:
      #         :scheme: http
      #         :authority: localhost:8080
      #         :path: /api
              # content-type: application/json
      #   exit: http_api_kafka_proxy
      # - when:
      #     - headers:
      #         :scheme: http
      #         :authority: localhost:8080
      #         :path: /grpc
              # content-type: application/grpc
      #   exit: grpc_server
      - when:
          - headers:
              :scheme: http
              :authority: localhost:8080
              :path: /sse/stream
        exit: sse_server
      - when:
          - headers:
              :scheme: http
              :authority: localhost:8080
              content-type: application/json
        exit: sse_http_kafka_proxy
      - when:
          - headers:
              :scheme: http
              :authority: localhost:8080
        exit: http_filesystem_proxy

# # Proxy REST endpoints to Kafka a topic
#   http_api_kafka_proxy:
#     type: http-kafka
#     kind: proxy
#     routes:
#       - when:
#           - method: POST
#             path: /items
#         exit: kafka_cache_client
#         with:
#           capability: produce
#           topic: items-snapshots
#       - when:
#           - method: GET
#             path: /items
#         exit: kafka_cache_client
#         with:
#           capability: fetch
#           topic: items-snapshots
#           merge:
#             content-type: application/json

# Proxy REST endpoints to Kafka a topic
  sse_http_kafka_proxy:
    type: http-kafka
    kind: proxy
    routes:
      - when:
          - method: POST
            path: /sse/events
        exit: kafka_cache_client
        with:
          capability: produce
          topic: sse-events
          key: ${idempotencyKey}
      - when:
          - method: GET
            path: /sse/events
        exit: kafka_cache_client
        with:
          capability: fetch
          topic: sse-events
          merge:
            content-type: application/json

# SSE Server With an exit to Kafka
  sse_server:
    type: sse
    kind: server
    exit: sse_kafka_proxy
  sse_kafka_proxy:
    type: sse-kafka
    kind: proxy
    routes:
      - when:
          - path: /sse/stream
        exit: kafka_cache_client
        with:
          topic: sse-events

# # gRPC service definition
#   grpc_server:
#     type: grpc
#     kind: server
#     options:
#       services:
#         - proto/echo.proto
#     routes:
#       - when:
#           - method: example.EchoService/*
#         exit: grpc_kafka

# # Proxy a gRPC service to a Kafka topic
#   grpc_kafka:
#     type: grpc-kafka
#     kind: proxy
#     routes:
#       - when:
#           - method: example.EchoService/*
#         exit: kafka_cache_client
#         with:
#           capability: produce
#           topic: echo-messages
#           acks: leader_only
#           reply-to: echo-messages

# Kafka caching layer
  kafka_cache_client:
    type: kafka
    kind: cache_client
    options:
      bootstrap:
        - items-snapshots
        - sse-events
        - echo-messages
    exit: kafka_cache_server
  kafka_cache_server:
    type: kafka
    kind: cache_server
    exit: kafka_client

# Connect to local Kafka
  kafka_client:
    type: kafka
    kind: client
    exit: kafka_tcp_client
  kafka_tcp_client:
    type: tcp
    kind: client
    options:
      host: kafka
      port: 29092
    routes:
      - when:
          - cidr: 0.0.0.0/0

# UI html file server
  http_filesystem_proxy:
    type: http-filesystem
    kind: proxy
    routes:
      - when:
          - path: /
        with:
          path: index.html
        exit: filesystem_server
  filesystem_server:
    type: filesystem
    kind: server
    options:
      location: /var/www/
