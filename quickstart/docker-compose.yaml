name: zilla-quickstart
services:
  zilla:
    image: ghcr.io/aklivity/zilla:${ZILLA_VERSION}
    container_name: zilla
    pull_policy: always
    restart: unless-stopped
    ports:
      - 7114:7114
      - 7151:7151
      - 7183:7183
      - 7190:7190
    environment:
      KAFKA_BOOTSTRAP_SERVER: ${KAFKA_BOOTSTRAP_SERVER}
      ROUTE_GUIDE_SERVER_HOST: route-guide-server
      ROUTE_GUIDE_SERVER_PORT: 50051
    volumes:
      - ./zilla.yaml:/etc/zilla/zilla.yaml
      - ./proto/:/etc/zilla/proto/
    command: start -v -e -Pzilla.engine.worker.capacity=512

  mqtt-simulator:
    image: ghcr.io/vordimous/mqtt-simulator:zilla-quickstart
    container_name: mqtt-simulator
    restart: unless-stopped
    volumes:
      - ./mqtt_sim_settings.json:/usr/src/app/config/settings.json

  route-guide-server:
    image: ghcr.io/aklivity/extras-route-guide-server:sha-e49c994
    container_name: route-guide-server
    restart: unless-stopped
    ports:
      - 50051:50051

  # region Bitnami Kafka Vendor
  kafka:
    image: bitnami/kafka:3.5
    profiles: [bitnami]
    container_name: kafka
    restart: unless-stopped
    ports:
      - 9092:9092
      - 29092:29092
    environment:
      ALLOW_PLAINTEXT_LISTENER: "yes"
      KAFKA_CFG_NODE_ID: "1"
      KAFKA_CFG_BROKER_ID: "1"
      KAFKA_CFG_GROUP_INITIAL_REBALANCE_DELAY_MS: "0"
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: "1@127.0.0.1:9093"
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: "CLIENT:PLAINTEXT,INTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT"
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_CFG_LOG_DIRS: "/tmp/logs"
      KAFKA_CFG_PROCESS_ROLES: "broker,controller"
      KAFKA_CFG_LISTENERS: "CLIENT://:9092,INTERNAL://:29092,CONTROLLER://:9093"
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: "INTERNAL"
      KAFKA_CFG_ADVERTISED_LISTENERS: "CLIENT://localhost:9092,INTERNAL://kafka:29092"
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: "true"

  kafka-init:
    image: bitnami/kafka:3.5
    profiles: [init-bitnami]
    user: root
    deploy:
      restart_policy:
        condition: none
        max_attempts: 0
    depends_on:
      - kafka
    entrypoint: ["/bin/sh", "-c"]
    command:
      - |
        echo -e "blocks until kafka is reachable";
        /opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server kafka:29092 --list;
        echo -e "Creating kafka topic";
        /opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server kafka:29092 --create --if-not-exists --topic http-messages --config cleanup.policy=compact
        /opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server kafka:29092 --create --if-not-exists --topic grpc-request
        /opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server kafka:29092 --create --if-not-exists --topic grpc-response
        /opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server kafka:29092 --create --if-not-exists --topic mqtt-messages
        /opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server kafka:29092 --create --if-not-exists --topic mqtt-retained --config cleanup.policy=compact
        /opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server kafka:29092 --create --if-not-exists --topic mqtt-sessions --config cleanup.policy=compact
        echo -e "Successfully created the following topics:";
        /opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server kafka:29092 --list;

  kafka-ui:
    image: ghcr.io/kafbat/kafka-ui:latest
    profiles: [bitnami]
    container_name: kafka-ui
    restart: unless-stopped
    ports:
      - 8080:8080
    depends_on:
      - kafka
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: host.docker.internal:9092
  # endregion Bitnami Kafka Vendor

  # region Redpanda Kafka Vendor
  redpanda:
    image: docker.redpanda.com/redpandadata/redpanda:v24.2.4
    profiles: [redpanda]
    container_name: redpanda
    command:
      - redpanda
      - start
      - --kafka-addr internal://0.0.0.0:29092,external://0.0.0.0:9092
      - --advertise-kafka-addr internal://redpanda:29092,external://localhost:9092
      - --pandaproxy-addr internal://0.0.0.0:28082,external://0.0.0.0:8082
      - --advertise-pandaproxy-addr internal://redpanda:28082,external://localhost:8082
      - --schema-registry-addr internal://0.0.0.0:28081,external://0.0.0.0:8081
      - --rpc-addr redpanda:33145
      - --advertise-rpc-addr redpanda:33145
      - --mode dev-container
      - --smp 1
      - --default-log-level=info
    ports:
      - 8081:8081
      - 8082:8082
      # - 9092:9092
      - 9644:9644
    healthcheck:
      test: ["CMD-SHELL", "rpk cluster health | grep -E 'Healthy:.+true' || exit 1"]
      interval: 15s
      timeout: 3s
      retries: 5
      start_period: 5s
  redpanda-init:
    image: docker.redpanda.com/redpandadata/redpanda:v24.2.4
    profiles: [init-redpanda]
    depends_on:
      redpanda:
        condition: service_healthy
    entrypoint: [ '/bin/sh', '-c' ]
    environment:
      REDPANDA_ADMIN: redpanda:9644
      REDPANDA_BROKER: redpanda:29092
    command: |
      "
      # Create a user
      rpk acl user create user -p redpanda --api-urls $${REDPANDA_ADMIN}
      rpk topic create http-messages -c cleanup.policy=compact --brokers $${REDPANDA_BROKER} --user user --password redpanda --sasl-mechanism SCRAM-SHA-256
      rpk topic create grpc-request --brokers $${REDPANDA_BROKER} --user user --password redpanda --sasl-mechanism SCRAM-SHA-256
      rpk topic create grpc-response --brokers $${REDPANDA_BROKER} --user user --password redpanda --sasl-mechanism SCRAM-SHA-256
      rpk topic create mqtt-messages --brokers $${REDPANDA_BROKER} --user user --password redpanda --sasl-mechanism SCRAM-SHA-256
      rpk topic create mqtt-retained -c cleanup.policy=compact --brokers $${REDPANDA_BROKER} --user user --password redpanda --sasl-mechanism SCRAM-SHA-256
      rpk topic create mqtt-sessions -c cleanup.policy=compact --brokers $${REDPANDA_BROKER} --user user --password redpanda --sasl-mechanism SCRAM-SHA-256
      "

  console:
    image: docker.redpanda.com/redpandadata/console:v2.3.6
    profiles: [redpanda]
    container_name: redpanda-console
    entrypoint: /bin/sh
    command: -c "echo \"$$CONSOLE_CONFIG_FILE\" > /tmp/config.yml; /app/console"
    environment:
      CONFIG_FILEPATH: /tmp/config.yml
      CONSOLE_CONFIG_FILE: |
        kafka:
          brokers: ["redpanda:29092"]
          schemaRegistry:
            enabled: true
            urls: ["http://redpanda:28081"]
        redpanda:
          adminApi:
            enabled: true
            urls: ["http://redpanda:9644"]
        connect:
          enabled: true
          clusters:
            - name: local-connect-cluster
              url: http://connect:28083
    ports:
      - 8080:8080
  # endregion Redpanda Kafka Vendor

networks:
  default:
    driver: bridge
